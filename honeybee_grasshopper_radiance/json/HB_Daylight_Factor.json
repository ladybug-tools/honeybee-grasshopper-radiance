{
  "version": "0.2.1", 
  "nickname": "DaylightFactor", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "recipe", 
        "description": "A simulation recipe that contains a simulation instructions and\ninput arguments. Use the \"HB Run Recipe\" component to execute the\nrecipe and get results.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A Honeybee Model for which Daylight Factor will be simulated.\nNote that this model should have grids assigned to it in order\nto produce meaningfule results.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_sensor_grids_", 
      "description": "Data type [string]\nA list of input grid display names to simulate. If None, all grids\nwithin the input _model will be simulated.\nDefault [None]", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sensor_count_", 
      "description": "Data type [string]\nThe maximum number of grid points per parallel execution.\nDefault [200]", 
      "type": "int", 
      "default": 200
    }, 
    {
      "access": "item", 
      "name": "radiance_parameters_", 
      "description": "Data type [string]\nText with the radiance parameters for ray tracing.\nDefault [-ab 2]", 
      "type": "string", 
      "default": "-ab 2"
    }
  ], 
  "subcategory": "3 :: Recipes", 
  "code": "\nimport json\nimport os\n\ntry:\n    from ladybug.futil import preparedir, nukedir\n    from ladybug.config import folders as lb_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.model import Model\n    from honeybee.config import folders as hb_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_radiance.config import folders as rad_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# check the installed Radiance and ensure it's from the right date\ncompatible_rad_date = (2020, 9, 3)\nhb_url = 'https://github.com/ladybug-tools/lbt-{{plugin}}/wiki/1.4-Compatibility-Matrix'\nrad_msg = 'Download and install the version of Radiance listed in the Ladybug ' \\\n    'Tools compatibility matrix\\n{}'.format(hb_url)\nassert rad_folders.radiance_path is not None, \\\n    'No Radiance installation was found on this machine.\\n{}'.format(rad_msg)\nassert rad_folders.radiance_version_date >= compatible_rad_date, \\\n    'The installed Radiance is not from {} or later.' \\\n    '\\n{}'.format('/'.join(str(v) for v in compatible_rad_date), rad_msg)\n\n\nclass Workflow(object):\n    \"\"\"Workflow class that remains the same for every type of recipe.\"\"\"\n\n    def __init__(self, workflow_json):\n        self._info = workflow_json\n\n    @property\n    def owner(self):\n        \"\"\"Get text for workflow owner.\"\"\"\n        return self._info['recipe']['owner']\n\n    @property\n    def name(self):\n        \"\"\"Get text for workflow name.\"\"\"\n        return self._info['recipe']['name']\n\n    @property\n    def tag(self):\n        \"\"\"Get text for workflow tag.\"\"\"\n        return self._info['recipe']['tag']\n\n    @property\n    def path(self):\n        \"\"\"Get text for the local path to the workflow's YAML recipe.\"\"\"\n        return self._info['recipe']['path']\n\n    @property\n    def default_simulation_path(self):\n        \"\"\"Get text for the default directory in which the simulation is run.\"\"\"\n        try:\n            return self._info['recipe']['default-simulation-path']\n        except KeyError:\n            return None\n\n    @property\n    def simulation_id(self):\n        \"\"\"Get text for the default simulation ID to use.\"\"\"\n        try:\n            return self._info['recipe']['simulation-id']\n        except KeyError:\n            return None\n\n    @property\n    def result_file_extension(self):\n        \"\"\"Get text for the result file extension.\"\"\"\n        try:\n            return self._info['recipe']['result-file-extension']\n        except KeyError:\n            return None\n\n    @property\n    def inputs(self):\n        \"\"\"Get text for formatted inputs.\"\"\"\n        inputs = ['  {}: {}'.format(*p) for p in self._info['inputs'].items()]\n        return '\\n'.join(inputs)\n\n    @property\n    def inputs_dict(self):\n        \"\"\"Get a dictionary for the inputs.\"\"\"\n        return self._info['inputs']\n\n    def write_inputs_json(self, simulation_folder=None, indent=4):\n        \"\"\"Write the inputs.json file that gets passed to queenbee luigi.\n        \n        Args:\n            simulation_folder: The full path to where the inputs.json file\n                will be written and where the simulation will be run. If None\n                the default_simulation_path on this Wirkflow will be used.\n            indent: The indent at which the JSON will be written (Default: 4).\n        \"\"\"\n        sim_fold = simulation_folder if simulation_folder else self.default_simulation_path\n        inputs = self._info['inputs'].copy()  # avoid editing the base dictionary\n        process_inputs(inputs, sim_fold)\n        if self.simulation_id:\n            inputs['simulation-id'] = self.simulation_id\n        # write the inputs dictionary into a file\n        if not os.path.isdir(sim_fold):\n            preparedir(sim_fold)\n        file_path = os.path.join(sim_fold, '{}-inputs.json'.format(self.name))\n        with open(file_path, 'w') as fp:\n            json.dump(inputs, fp, indent=indent)\n        return file_path\n\n    @staticmethod\n    def process_inputs(inputs, simulation_folder):\n        \"\"\"A method that can be overwritten to process inputs in write_inputs_json.\n\n        Args:\n            inputs: A dictionay with the inputs of the workflows as keys.\n            simulation_folder: Path to the folder in which the workflow is executed.\n        \"\"\"\n        pass\n\n    def ToString(self):\n        return '%s:\\n%s' % (self.name, self.inputs)\n\n\nif all_required_inputs(ghenv.Component):\n    # this part involves some checks that should be eventually integrated to Queenbee\n    assert isinstance(_model, Model), \\\n        'Expected Honeybee Model. Got {}.'.format(type(_model))\n    if len(_model.properties.radiance.sensor_grids) == 0:\n        msg = 'Input _model contains no sensor grids, which will result in a ' \\\n            'meaningless simulation.\\nMake sure that you have assigned grids to ' \\\n            'the Model with the \"HB Assign Grids and Views\" component.'\n        give_warning(ghenv.Component, msg)\n        print(msg)\n    all_grids = [g.display_name for g in _model.properties.radiance.sensor_grids]\n    if len(_sensor_grids_) == 0 or _sensor_grids_[0] is None:\n        _sensor_grids_ = all_grids  # use all the Model's sensor grids\n    else:\n        for grid in _sensor_grids_:\n            assert grid in all_grids, \\\n                'Sensor grid \"{}\" was not found in the Model.'.format(grid)\n\n    # this part is an optional step for each recipe to process the model for luigi input\n    def default_simulation_path(self):\n        return os.path.join(\n            hb_folders.default_simulation_folder,\n            self._info['inputs']['model'].identifier, 'Radiance')\n\n    def process_inputs(inputs, folder):\n        model_fold = os.path.join(folder, 'model')\n        if os.path.isdir(model_fold):\n            nukedir(model_fold, rmdir=True)  # delete the folder if it already exists\n        model = inputs['model']\n        model.to.rad_folder(model, folder)\n        inputs['model'] = 'model'\n\n    Workflow.default_simulation_path = property(default_simulation_path)\n    Workflow.process_inputs = staticmethod(process_inputs)\n\n    #  this part will be different for each recipe but standardized\n    local_path = os.path.join(\n        lb_folders.ladybug_tools_folder, 'resources', 'recipes',\n        'honeybee_radiance_recipe', 'daylight_factor.yaml')\n    recipe = {\n        'owner': 'ladybug-tools',\n        'name': 'daylight-factor',\n        'tag': '9d5d49c529514f1cb3873657142233ff4cf947d52c0722875dc8cbda50c9239b',\n        'path': local_path,\n        'default-simulation-path': None,\n        'simulation-id': 'daylight_factor',\n        'result-file-extension': 'res'\n      }\n    _inputs = {\n        'model': _model,\n        'sensor-grids': _sensor_grids_,\n        'sensor-count': sensor_count_,\n        'radiance-parameters': radiance_parameters_\n    }\n\n    # this part will always stay the same for every recipe\n    inputs = {}\n    for key, val in _inputs.items():\n        if bool(val):\n            inputs[key] = val\n    workflow_json ={\n      \"recipe\": recipe,\n      \"inputs\": inputs\n    }\n    recipe = Workflow(workflow_json)\n", 
  "category": "HB-Radiance", 
  "name": "HB Daylight Factor", 
  "description": "Run daylight factor for a single model."
}