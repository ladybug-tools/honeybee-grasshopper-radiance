{
  "version": "1.8.0", 
  "nickname": "VizSky", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "hdr", 
        "description": "Path to the High Dynamic Range (HDR) image file of the sky. This can be\nplugged into the Ladybug \"Image Viewer\" component to preview the image.\nIt can also be plugged into the \"HB False Color\" component to convert\nthe image into a false color version. Lastly, it can be connected to\nthe \"HB HDR to GIF\" component to get a GIF image that is more portable\nand easily previewed by different software.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "ghi", 
        "description": "The global horizontal irradiance (W/m2) for an upstructed test point under\nthe sky.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_sky", 
      "description": "A Radiance sky from any of the sky components under the \"Light Sources\" tab.\nText string representations of skies are also acceptable.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_size_", 
      "description": "A number for the X and Y dimension of the imgae in pixles. (Default: 500 px)", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Light Sources", 
  "code": "\nimport os\n\ntry:  # import honeybee_radiance dependencies\n    from ladybug.futil import write_to_file_by_name\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:  # import honeybee dependencies\n    from honeybee.config import folders\n    from honeybee.typing import clean_rad_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import honeybee_radiance_command dependencies\n    from honeybee_radiance_command.oconv import Oconv\n    from honeybee_radiance_command.rpict import Rpict\n    from honeybee_radiance_command.rtrace import Rtrace\n    from honeybee_radiance_command.rcalc import Rcalc\n    from honeybee_radiance_command.pcond import Pcond\n    from honeybee_radiance_command.pflip import Pflip\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance_command:\\n\\t{}'.format(e))\n\ntry:  # import honeybee_radiance dependencies\n    from honeybee_radiance.config import folders as rad_folders\n    from honeybee_radiance.lightsource.sky.strutil import string_to_sky\n    from honeybee_radiance.lightsource.sky import ClimateBased\n    from honeybee_radiance.sensorgrid import SensorGrid\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:  # import ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# check the Radiance date of the installed radiance\ntry:  # import lbt_recipes dependencies\n    from lbt_recipes.version import check_radiance_date\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\ncheck_radiance_date()\n\n\nif all_required_inputs(ghenv.Component):\n    # set defaults and process the sky input\n    _size_ = 500 if _size_ is None else _size_\n    if isinstance(_sky, str):  # convert the sky string into a sky object\n        _sky = string_to_sky(_sky)\n    sky_content = _sky.to_radiance(1) if isinstance(_sky, ClimateBased) else _sky.to_radiance()\n\n    # set up the paths for the various files used in translation\n    sky_dir = os.path.join(folders.default_simulation_folder, 'sky_visualiztion')\n    sky_file, sky_oct = 'weather.sky', 'sky_visual.oct'\n    write_to_file_by_name(sky_dir, sky_file, sky_content, mkdir=True)\n    ghi_res, full_ghi_res = 'ghi.res', os.path.join(sky_dir, 'ghi.res')\n    init_hdr, final_hdr = 'sky_init.HDR', '{}.HDR'.format(clean_rad_string(str(_sky)))\n    hdr = os.path.join(sky_dir, final_hdr)\n    if os.path.isfile(hdr):\n        os.remove(hdr)\n\n    # build up the commands to render the image of the sky\n    oconv = Oconv(inputs=[sky_file], output=sky_oct)\n    oconv.options.f = True\n\n    rpict = Rpict(octree=sky_oct, output=init_hdr)\n    rpict.options.i = True\n    rpict.options.t = 10\n    rpict.options.ab = 1\n    rpict.options.ad = 1000\n    rpict.options.as_ = 20\n    rpict.options.ar = 300\n    rpict.options.aa = 0.1\n    rpict.options.x = _size_\n    rpict.options.y = _size_\n    rpict.options.vt = 'h'\n    rpict.options.vp = (0, 0, 0)\n    rpict.options.vd = (0, 0, 1)\n    rpict.options.vu = (0, 1, 0)\n    rpict.options.vh = 180\n    rpict.options.vv = 180\n\n    pflip = Pflip(input=init_hdr, output=final_hdr)\n    pflip.options.h = True\n\n    # add the command to get the horizontal irradiance of the sky\n    grid = SensorGrid.from_position_and_direction('up_sensor', [(0, 0, 0)], [(0, 0, 1)])\n    grid.to_file(sky_dir, 'up_sensor.pts')\n    rtrace = Rtrace(octree=sky_oct, sensors='up_sensor.pts')\n    rtrace.options.I = True\n    rtrace.options.w = True\n    rtrace.options.h = True\n    rtrace.options.ab = 1\n    rcalc = Rcalc(output=ghi_res)\n    rcalc.options.e = '$1=(0.265*$1+0.67*$2+0.065*$3)'\n    rtrace.pipe_to = rcalc\n\n    # run the commands in series and load the global horizontal irradiance\n    env = None\n    if rad_folders.env != {}:\n        env = rad_folders.env\n    env = dict(os.environ, **env) if env else None\n    for r_cmd in (oconv, rpict, pflip, rtrace):\n        r_cmd.run(env, cwd=sky_dir)\n    with open(full_ghi_res, 'r') as inf:\n        ghi = inf.readlines()[0].strip()\n", 
  "category": "HB-Radiance", 
  "name": "HB Visualize Sky", 
  "description": "Visualize a sky as a High Dynamic Range (HDR) image file.\n-"
}