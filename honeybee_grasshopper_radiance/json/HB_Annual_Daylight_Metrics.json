{
  "version": "1.0.0", 
  "nickname": "AnnualMetrics", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "DA", 
        "description": "Daylight autonomy. The percentage of time that each sensor\nrecieves equal or more than the threshold.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "UDI", 
        "description": "Useful daylight illuminance. The percentage of time that illuminace\nfalls between minimum and maximum thresholds.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_results", 
      "description": "An list of annual Radiance result files from the \"HB Run Workflow\"\ncomponent.  This should include both the .ill files and the\nsun-up-hours.txt", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_occ_sch_", 
      "description": "An annual occupancy schedule as a Data Collection. Such a Data\ncollection can be obtained from any honeybee energy schedule using\nthe \"HB Schedule To Data\" component. By default, a schedule from\n9AM to 5PM on weekdays will be used.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_threshold_", 
      "description": "Threshhold for daylight autonomy in lux (default: 300).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_min_max_", 
      "description": "A list for min, max value for useful daylight illuminance", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Results", 
  "code": "\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef generate_default_schedule():\n    \"\"\"Create a list of 8760 values for a default occupancy schedule.\"\"\"\n    weekend = [0] * 24\n    weekday = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n    all_vals = []\n    day_counter = 0\n    week_counter = 1\n    while day_counter < 365:\n        day_counter += 1\n        if week_counter < 7:\n            if week_counter == 1:\n                all_vals.extend(weekend)\n            else:\n                all_vals.extend(weekday)\n            week_counter += 1\n        else:\n            all_vals.extend(weekend)\n            week_counter = 1\n    return all_vals\n\n\ndef parse_sun_up_hours(result_files, schedule):\n    \"\"\"Parse the sun-up hours from the result file .txt file.\n\n    Args:\n        result_files: A list of result files that contains the .txt file.\n        schedule: A list of 8760 values for the occupancy schedule.\n    \"\"\"\n    for i, r_file in enumerate(result_files):\n        if r_file.endswith('.txt'):\n            with open(r_file) as soh_f:\n                occ_pattern = [schedule[int(float(h))] for h in soh_f]\n            result_files.pop(i)  # remove it from the list\n            return occ_pattern\n\n\ndef annual_metrics(ill_file, occ_pattern, total_occupied_hours,\n                   threshold=300, min_t=100, max_t=2000):\n    \"\"\"Compute annual metrics for a given result file.\"\"\"\n    da = []\n    udi = []\n    with open(ill_file) as results:\n        for pt_res in results:\n            pda = 0\n            pudi = 0\n            for is_occ, hourly_res in zip(occ_pattern, pt_res.split()):\n                if is_occ == 0:\n                    continue\n                value = float(hourly_res)\n                if value > threshold:\n                    pda += 1\n                if min_t <= value <= max_t:\n                    pudi += 1\n            da.append(round(100.0 * pda / total_occupied_hours, 2))\n            udi.append(round(100.0 * pudi / total_occupied_hours, 2))\n    return da, udi\n\n\n\nif all_required_inputs(ghenv.Component):\n    # set default values for the thresholds\n    _threshold_ = _threshold_ if _threshold_ else 300\n    if len(_min_max_) != 0:\n        assert len(_min_max_), 'Expected two values for _min_max_.'\n        min_t = _min_max_[0]\n        max_t = _min_max_[1]\n    else:\n        min_t = 100\n        max_t = 2000\n\n    # process the schedule and sun-up hours\n    schedule = _occ_sch_.values if _occ_sch_ else generate_default_schedule()\n    total_occupied_hours = sum(schedule)\n    occ_pattern = parse_sun_up_hours(_results, schedule)\n\n    # compute the annual metrics\n    DA, UDI = [], []\n    for ill_file in _results:\n        da, udi = annual_metrics(ill_file, occ_pattern, total_occupied_hours,\n                                 _threshold_, min_t, max_t)\n        DA.append(da)\n        UDI.append(udi)\n    DA = list_to_data_tree(DA)\n    UDI = list_to_data_tree(UDI)", 
  "category": "HB-Radiance", 
  "name": "HB Annual Daylight Metrics", 
  "description": "Annual Daylight Metrics.\n-"
}