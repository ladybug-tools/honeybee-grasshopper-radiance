{
  "version": "1.0.0", 
  "nickname": "GridRooms", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "grid", 
        "description": "A SensorGrid object that can be used in a grid-based recipe.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "points", 
        "description": "The points that are at the center of each grid cell.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "Analysis mesh that can be passed to the 'Color Mesh' component.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "A list of honeybee Rooms for which sensor grids will be generated.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "Number for the size of the grid cells.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_dist_floor_", 
      "description": "Number for the distance to move points from the floors of\nthe input rooms. The default is 0.8 meters.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "remove_out_", 
      "description": "Boolean to note whether an extra check should be run to remove\nsensor points that lie outside the Room volume. Note that this can\nadd significantly to the component's run time and this check is\nusually not necessary in the case that all walls are vertical\nand all floors are horizontal (Default: False).", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Basic Properties", 
  "code": "\ntry:  # import the ladybug_geometry dependencies\n    from ladybug_geometry.geometry3d.mesh import Mesh3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee dependencies\n    from honeybee.facetype import Floor\n    from honeybee.typing import clean_rad_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-radiance dependencies\n    from honeybee_radiance.sensorgrid import SensorGrid\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:  # import ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import conversion_to_meters, tolerance\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # set defaults for any blank inputs\n    if _dist_floor_ is None:\n        _dist_floor_ = 0.8 / conversion_to_meters()\n\n    # create lists to be filled with content\n    grid = []\n    points = []\n    mesh = []\n\n    for room in _rooms:\n        # get all of the floor faces of the room as Breps\n        floor_faces = [from_face3d(face.geometry.flip()) for face in room.faces\n                       if isinstance(face.type, Floor)]\n\n        if len(floor_faces) != 0:\n            # create the gridded ladybug Mesh3D\n            lb_mesh = to_joined_gridded_mesh3d(floor_faces, _grid_size, _dist_floor_)\n\n            # remove points outside of the room volume if requested\n            if remove_out_:\n                pattern = [room.geometry.is_point_inside(pt)\n                           for pt in lb_mesh.face_centroids]\n                lb_mesh, vertex_pattern = lb_mesh.remove_faces(pattern)\n\n            # extract positions and directions from the mesh\n            base_points = [from_point3d(pt) for pt in lb_mesh.face_centroids]\n            base_poss = [(pt.x, pt.y, pt.z) for pt in lb_mesh.face_centroids]\n            base_dirs = [(vec.x, vec.y, vec.z) for vec in lb_mesh.face_normals]\n\n            # create the sensor grid\n            s_grid = SensorGrid.from_position_and_direction(room.identifier, base_poss, base_dirs)\n            s_grid.display_name = clean_rad_string(room.display_name)\n            s_grid.room_identifier = room.identifier\n            s_grid.mesh = lb_mesh\n\n            # append everything to the lists\n            grid.append(s_grid)\n            points.append(base_points)\n            mesh.append(from_mesh3d(lb_mesh))\n\n    # convert the lists of points to data trees\n    points = list_to_data_tree(points)\n", 
  "category": "HB-Radiance", 
  "name": "HB Sensor Grid from Rooms", 
  "description": "Generate SensorGrid objects from the floors of honeybee Rooms.\nThese SensorGrids can be used in a grid-based recipe.\n-\nThe names of the grids will be the same as the rooms that they came from.\n-"
}