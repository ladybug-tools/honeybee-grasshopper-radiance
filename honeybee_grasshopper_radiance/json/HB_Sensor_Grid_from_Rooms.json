{
  "version": "1.4.5", 
  "nickname": "GridRooms", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "grid", 
        "description": "A SensorGrid object that can be used in a grid-based recipe.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "points", 
        "description": "The points that are at the center of each grid cell.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "Analysis mesh that can be passed to the 'Spatial Heatmap' component.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "A list of honeybee Rooms for which sensor grids will be generated.\nThis can also be an entire Honeybee Model from which Rooms will\nbe extracted.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "Number for the size of the grid cells.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_dist_floor_", 
      "description": "Number for the distance to move points from the floors of\nthe input rooms. The default is 0.8 meters.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "quad_only_", 
      "description": "Boolean to note whether meshing should be done using Rhino's\ndefaults (False), which fills the entire _geometry to the edges\nwith both quad and tringulated faces, or a mesh with only quad\nfaces should be generated.\n_\nFOR ADVANCED USERS: This input can also be a vector object that will\nbe used to set the orientation of the quad-only grid. Note that,\nif a vector is input here that is not aligned with the plane of\nthe room's floors, an error will be raised.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "remove_out_", 
      "description": "Boolean to note whether an extra check should be run to remove\nsensor points that lie outside the Room volume. Note that this can\nadd significantly to the component's run time and this check is\nusually not necessary in the case that all walls are vertical\nand all floors are horizontal (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "wall_offset_", 
      "description": "A number for the distance at which sensors close to walls\nshould be removed.", 
      "type": "double", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Basic Properties", 
  "code": "\nimport math\n\ntry:  # import the ladybug_geometry dependencies\n    from ladybug_geometry.geometry3d.plane import Plane\n    from ladybug_geometry.geometry3d.face import Face3D\n    from ladybug_geometry.geometry3d.mesh import Mesh3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.room import Room\n    from honeybee.facetype import Floor, Wall\n    from honeybee.typing import clean_rad_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-radiance dependencies\n    from honeybee_radiance.sensorgrid import SensorGrid\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:  # import ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import conversion_to_meters, tolerance\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d, to_vector3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # set defaults for any blank inputs and process the quad_only_\n    _dist_floor_ = 0.8 / conversion_to_meters() if _dist_floor_ is None else _dist_floor_\n    try:\n        x_axis = to_vector3d(quad_only_)\n    except AttributeError:\n        x_axis = None\n\n    # create lists to be filled with content\n    grid = []\n    points = []\n    mesh = []\n    rooms = []\n    for obj in _rooms:\n        if isinstance(obj, Model):\n            rooms.extend(obj.rooms)\n        elif isinstance(obj, Room):\n            rooms.append(obj)\n        else:\n            raise TypeError('Expected Honeybee Room or Model. Got {}.'.format(type(obj)))\n\n    for room in rooms:\n        # get all of the floor faces of the room as Breps\n        lb_floors = [face.geometry.flip() for face in room.faces if isinstance(face.type, Floor)]\n\n        if len(lb_floors) != 0:\n            # create the gridded ladybug Mesh3D\n            if quad_only_:  # use Ladybug's built-in meshing methods\n                if x_axis:\n                    lb_floors = [Face3D(f.boundary, Plane(f.normal, f[0], x_axis), f.holes)\n                                 for f in lb_floors]\n                lb_meshes = []\n                for geo in lb_floors:\n                    try:\n                        lb_meshes.append(geo.mesh_grid(_grid_size, offset=_dist_floor_))\n                    except AssertionError:\n                        continue\n                if len(lb_meshes) == 0:\n                    lb_mesh = None\n                else:\n                    lb_mesh = lb_meshes[0] if len(lb_meshes) == 1 else \\\n                        Mesh3D.join_meshes(lb_meshes)\n            else:  # use {{Cad}}'s default meshing\n                floor_faces = [from_face3d(face) for face in lb_floors]\n                lb_mesh = to_joined_gridded_mesh3d(floor_faces, _grid_size, _dist_floor_)\n\n            # remove points outside of the room volume if requested\n            if remove_out_ and lb_mesh is not None:\n                pattern = [room.geometry.is_point_inside(pt)\n                           for pt in lb_mesh.face_centroids]\n                try:\n                    lb_mesh, vertex_pattern = lb_mesh.remove_faces(pattern)\n                except AssertionError:  # the grid lies completely outside of the room\n                    lb_mesh = None\n\n            # remove any sensors within a certain distance of the walls, if requested\n            if wall_offset_ is not None and lb_mesh is not None:\n                wall_geos = [f.geometry for f in room.faces if isinstance(f.type, Wall)]\n                pattern = []\n                for pt in lb_mesh.face_centroids:\n                    for wg in wall_geos:\n                        close_pt = wg.plane.closest_point(pt)\n                        p_dist = pt.distance_to_point(close_pt)\n                        if p_dist <= wall_offset_:\n                            close_pt_2d = wg.plane.xyz_to_xy(close_pt)\n                            g_dist = wg.polygon2d.distance_to_point(close_pt_2d)\n                            f_dist = math.sqrt(p_dist ** 2 + g_dist ** 2)\n                            if f_dist <= wall_offset_:\n                                pattern.append(False)\n                                break\n                    else:\n                        pattern.append(True)\n                try:\n                    lb_mesh, vertex_pattern = lb_mesh.remove_faces(pattern)\n                except AssertionError:  # the grid lies completely outside of the room\n                    lb_mesh = None\n\n            if lb_mesh is not None:\n                # extract positions and directions from the mesh\n                base_points = [from_point3d(pt) for pt in lb_mesh.face_centroids]\n                base_poss = [(pt.x, pt.y, pt.z) for pt in lb_mesh.face_centroids]\n                base_dirs = [(vec.x, vec.y, vec.z) for vec in lb_mesh.face_normals]\n\n                # create the sensor grid\n                s_grid = SensorGrid.from_position_and_direction(\n                    clean_rad_string(room.display_name), base_poss, base_dirs)\n                s_grid.display_name = room.display_name\n                s_grid.room_identifier = room.identifier\n                s_grid.mesh = lb_mesh\n                s_grid.base_geometry = \\\n                    tuple(f.move(f.normal * _dist_floor_) for f in lb_floors)\n\n                # append everything to the lists\n                grid.append(s_grid)\n                points.append(base_points)\n                mesh.append(from_mesh3d(lb_mesh))\n\n    # convert the lists of points to data trees\n    points = list_to_data_tree(points)\n", 
  "category": "HB-Radiance", 
  "name": "HB Sensor Grid from Rooms", 
  "description": "Generate SensorGrid objects from the floors of honeybee Rooms.\nThese SensorGrids can be used in a grid-based recipe.\n-\nThe names of the grids will be the same as the rooms that they came from.\n-"
}