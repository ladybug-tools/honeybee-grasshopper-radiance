{
  "version": "0.1.0", 
  "nickname": "ApplyShadeMod", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "hb_objs", 
        "description": "The input honeybee objects with their modifiers edited.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "Honeybee Shades, Apertures, Doors, Faces, or Rooms to which the\ninput _mod should be assigned. For the case of a Honeybee Aperture,\nDoor, Face or Room, the Modifier will be assigned to only the\nchild shades directly assigned to that object. So passing in a Room\nwill not change the modifier of shades assigned to Apertures\nof the Room's Faces. If this is the desired outcome, then the Room\nshould be deconstructed into its child objects before using\nthis component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_mod", 
      "description": "A Honeybee Modifier to be applied to the input _hb_objs.\nThis can also be text for a modifier to be looked up in the shade\nmodifier library. If an array of text or modifier objects\nare input here, different modifiers will be assigned based on\ncardinal direction, starting with north and moving clockwise.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Modifiers", 
  "code": "\n\ntry:  # import the honeybee-radiance extension\n    from honeybee_radiance.lib.modifiers import modifier_by_identifier\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee dependencies\n    from honeybee.shade import Shade\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.aperture import Aperture\n    from honeybee.door import Door\n    from honeybee.orientation import angles_from_num_orient, face_orient_index\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    hb_objs = [obj.duplicate() for obj in _hb_objs]\n\n    # process the input modifiers\n    for i, mod in enumerate(_mod):\n        if isinstance(mod, str):\n            _mod[i] = modifier_by_identifier(mod)\n\n    # error message for unrecognized object\n    error_msg = 'Input _hb_objs must be a Room, Face, Aperture, Door, or Shade. Not {}.'\n\n    # assign the modifiers\n    if len(_mod) == 1:\n        for obj in hb_objs:\n            if isinstance(obj, Shade):\n                obj.properties.radiance.modifier = _mod[0]\n            elif isinstance(obj, (Aperture, Face, Room, Door)):\n                for shd in obj.shades:\n                    shd.properties.radiance.modifier = _mod[0]\n            else:\n                raise TypeError(error_msg.format(type(obj)))\n    else:  # assign modifiers based on cardinal direction\n        angles = angles_from_num_orient(len(_mod))\n        for obj in hb_objs:\n            if isinstance(obj, (Aperture, Face, Door)):\n                orient_i = face_orient_index(obj, angles)\n                if orient_i is not None:\n                    for shd in obj.shades:\n                        shd.properties.radiance.modifier = _mod[orient_i]\n            elif isinstance(obj, Shade):\n                obj.properties.radiance.modifier = _mod[0]\n            elif isinstance(obj, Room):\n                 for shd in obj.shades:\n                    shd.properties.radiance.modifier = _mod[0]\n            else:\n                raise TypeError(error_msg.format(type(obj)))\n\n", 
  "category": "HB-Radiance", 
  "name": "HB Apply Shade Modifier", 
  "description": "Apply a Modifier to Honeybee Shade objects. Alternatively, it can assign a Modifier\nto all of the child shades of an Aperture, Door, Face, or a Room.\n_\nThis component supports the assigning of different modifiers based on cardinal\norientation, provided that a list of Modifiers are input to the _mod. \n-"
}