{
  "version": "1.6.1", 
  "nickname": "AvgValues", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "values", 
        "description": "Average illuminance or irradiance valules for each sensor in lux or W/m2.\nEach value is for a different sensor of the grid. These can be plugged\ninto the \"LB Spatial Heatmap\" component along with meshes of the sensor\ngrids to visualize results.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_results", 
      "description": "An list of annual Radiance result files from either the \"HB Annual Daylight\"\nor the \"HB Annual Irradiance\" component (containing the .ill files and\nthe sun-up-hours.txt). This can also be just the path to the folder\ncontaining these result files.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_hoys_", 
      "description": "An optional numbers or list of numbers to select the hours of the year (HOYs)\nfor which results will be computed. These HOYs can be obtained from the\n\"LB Calculate HOY\" or the \"LB Analysis Period\" components. If None, all\nhours of the results will be used.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "median_", 
      "description": "Set to True to get the median values instead of the average. The median\nvalues can only be calculated for a results folder from the\n\"HB Annual Daylight\" component. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "grid_filter_", 
      "description": "The name of a grid or a pattern to filter the grids. For instance,\nfirst_floor_* will simulate only the sensor grids that have an\nidentifier that starts with first_floor_. By default all the grids\nwill be processed.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Results", 
  "code": "\nimport os\nimport subprocess\n\ntry:\n    from ladybug.futil import write_to_file\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_radiance.postprocess.annualdaylight import _process_input_folder\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:\n    from pollination_handlers.outputs.helper import read_sensor_grid_result\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import pollination_handlers:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef parse_sun_up_hours(sun_up_hours, hoys, timestep):\n    \"\"\"Parse the sun-up hours from the result file .txt file.\n\n    Args:\n        sun_up_hours: A list of integers for the sun-up hours.\n        hoys: A list of 8760 * timestep values for the hoys to select. If an empty\n            list is passed, None will be returned.\n        timestep: Integer for the timestep of the analysis.\n    \"\"\"\n    if len(hoys) != 0:\n        schedule = [False] * (8760 * timestep)\n        for hr in hoys:\n            schedule[int(hr * timestep)] = True\n        su_pattern = [schedule[int(h * timestep)] for h in sun_up_hours]\n        return su_pattern\n\n\ndef average_values(ill_file, su_pattern, full_len):\n    \"\"\"Compute average values for a given result file.\"\"\"\n    avg_vals = []\n    with open(ill_file) as results:\n        if su_pattern is None:  # no HOY filter on results\n            for pt_res in results:\n                values = [float(r) for r in pt_res.split()]\n                total_val = sum(values)\n                avg_vals.append(total_val / full_len)\n        else: \n            for pt_res in results:\n                values = [float(r) for r, is_hoy in zip(pt_res.split(), su_pattern) if is_hoy]\n                total_val = sum(values)\n                try:\n                    avg_vals.append(total_val / full_len)\n                except ZeroDivisionError:\n                    avg_vals.append(0)\n    return avg_vals\n\n\nif all_required_inputs(ghenv.Component):\n    # set up the default values\n    median_ = False if median_ is None else median_\n    grid_filter_ = '*' if grid_filter_ is None else grid_filter_\n    res_folder = os.path.dirname(_results[0]) if os.path.isfile(_results[0]) \\\n        else _results[0]\n\n    # check to see if results use the newer numpy arrays\n    if os.path.isdir(os.path.join(res_folder, '__static_apertures__')) or \\\n        os.path.isfile(os.path.join(res_folder, 'grid_states.json')):\n        res_type = 'average' if median_ is False else 'median'\n        cmds = [folders.python_exe_path, '-m', 'honeybee_radiance_postprocess',\n                'post-process', '{}-values'.format(res_type), res_folder, '-sf',\n                'metrics']\n        if len(_hoys_) != 0:\n            hoys_str = '\\n'.join(str(h) for h in _hoys_)\n            hoys_file = os.path.join(res_folder, 'hoys.txt')\n            write_to_file(hoys_file, hoys_str)\n            cmds.extend(['--hoys-file', hoys_file])\n        if grid_filter_ != '*':\n            cmds.extend(['--grids-filter', grid_filter_])\n        use_shell = True if os.name == 'nt' else False\n        process = subprocess.Popen(\n            cmds, cwd=res_folder, shell=use_shell,\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout = process.communicate()  # wait for the process to finish\n        if stdout[-1] != '':\n            print(stdout[-1])\n            raise ValueError('Failed to compute {} values.'.format(res_type))\n        res_dir = os.path.join(res_folder, 'metrics', '{}_values'.format(res_type))\n        if os.path.isdir(res_dir):\n            values = read_sensor_grid_result(res_dir, res_type,'full_id', False)\n            values = list_to_data_tree(values)\n\n    else:\n        if median_:\n            raise ValueError('The median values can only be calculated for a '\n                             'results folder from the \"HB Annual Daylight\" '\n                             'component.')\n        # extract the timestep if it exists\n        timestep = 1\n        tstep_file = os.path.join(res_folder, 'timestep.txt')\n        if os.path.isfile(tstep_file):\n            with open(tstep_file) as tf:\n                timestep = int(tf.readline())\n        full_len = 8760 * timestep if len(_hoys_) == 0 else len(_hoys_)\n\n        # parse the sun-up-hours\n        grids, sun_up_hours = _process_input_folder(res_folder, grid_filter_)\n        su_pattern = parse_sun_up_hours(sun_up_hours, _hoys_, timestep)\n\n        # compute the average values\n        values = []\n        for grid_info in grids:\n            ill_file = os.path.join(res_folder, '%s.ill' % grid_info['full_id'])\n            dgp_file = os.path.join(res_folder, '%s.dgp' % grid_info['full_id'])\n            if os.path.isfile(dgp_file):\n                avg = average_values(dgp_file, su_pattern, full_len)\n            else:\n                avg = average_values(ill_file, su_pattern, full_len)\n            values.append(avg)\n        values = list_to_data_tree(values)\n", 
  "category": "HB-Radiance", 
  "name": "HB Annual Average Values", 
  "description": "Get average illuminance or irradiance values over an annual daylight or irradiance\nsimulation.\n_\nThe _hoys_ input can also be used to filter the data for a particular time period or\nhour/timestep of the simulation.\n-"
}