{
  "version": "1.2.5", 
  "nickname": "DirectSunHours", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "results", 
        "description": "Raw result files (.ill) that contain matrices of zero/one values\nindicating whether each sensor is exposed to the sun at a given\ntime step of the input Wea.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "hours", 
        "description": "The cumulative number of hours that each sensor can see the sun.\nEach value is always in hours provided that the input _timestep_\nis the same as the input Wea.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A Honeybee Model for which Direct Sun Hours will be simulated.\nNote that this model should have grids assigned to it in order\nto produce meaningfule results.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_wea", 
      "description": "A Wea object produced from the Wea components that are under the Light\nSources tab. This can also be the path to a .wea or a .epw file.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_timestep_", 
      "description": "An integer for the timestep of the inpput _wea. This value will\nbe used to ensure the units of the results are in hours. (Default: 1)", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "north_", 
      "description": "A number between -360 and 360 for the counterclockwise difference\nbetween the North and the positive Y-axis in degrees. This can\nalso be Vector for the direction to North. (Default: 0).", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "grid_filter_", 
      "description": "Text for a grid identifer or a pattern to filter the sensor grids of\nthe model that are simulated. For instance, first_floor_* will simulate\nonly the sensor grids that have an identifier that starts with\nfirst_floor_. By default, all grids in the model will be simulated.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sensor_count_", 
      "description": "Integer for the maximum number of sensor grid points per\nparallel execution. (Default: 200).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "run_settings_", 
      "description": "Settings from the \"HB Recipe Settings\" component that specify\nhow the recipe should be run. This can also be a text string of\nrecipe settings.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to True to run the recipe and get results. This input can also be\nthe integer \"2\" to run the recipe silently.", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Recipes", 
  "code": "\ntry:\n    from lbt_recipes.recipe import Recipe\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, recipe_result\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # create the recipe and set the input arguments\n    recipe = Recipe('direct-sun-hours')\n    recipe.input_value_by_name('model', _model)\n    recipe.input_value_by_name('wea', _wea)\n    recipe.input_value_by_name('timestep', _timestep_)\n    recipe.input_value_by_name('north', north_)\n    recipe.input_value_by_name('grid-filter', grid_filter_)\n    recipe.input_value_by_name('sensor-count', sensor_count_)\n\n    # run the recipe\n    silent = True if _run > 1 else False\n    project_folder = recipe.run(run_settings_, radiance_check=True, silent=silent)\n\n    # load the results\n    try:\n        results = recipe_result(recipe.output_value_by_name(\n            'direct-sun-hours', project_folder))\n        hours = recipe_result(recipe.output_value_by_name(\n            'cumulative-sun-hours', project_folder))\n    except Exception:\n        raise Exception(recipe.failure_message(project_folder))\n", 
  "category": "HB-Radiance", 
  "name": "HB Direct Sun Hours", 
  "description": "Calculate the number of hours of direct sun received by grids of sensors in a\nHoneybee model.\n_\nThe fundamental calculation of this recipe is the same as that of the \"LB Direct\nSun Hours\" component except that this recipe uses Radiance, which allows the\nsimulation to scale better for large numbers of sensors.\n-"
}