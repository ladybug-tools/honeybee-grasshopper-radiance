{
  "version": "1.8.1", 
  "nickname": "AnnualDaylight", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "results", 
        "description": "Raw result files (.ill) that contain illuminance matrices for each sensor\nat each hour of the simulation. These can be postprocessed using\nvarious components under the 4::Results sub-tab.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "DA", 
        "description": "Daylight autonomy results in percent. DA is the percentage of occupied hours\nthat each sensor recieves equal or more than the illuminance threshold.\nEach value is for a different sensor of the grid. These can be plugged\ninto the \"LB Spatial Heatmap\" component along with meshes of the sensor\ngrids to visualize results. These can also be connected to the \"HB\nSpatial Daylight Autonomy\" component to compute spatial daylight\nautonomy for each grid. Note that the resulting sDA is only compliant\nwith LEED if dynamic blinds have been simulated using the methods\nin IES-LM-83-12.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "cDA", 
        "description": "Continuous daylight autonomy results in percent. cDA is similar to DA except\nthat values below the illuminance threshold can still count partially\ntowards the final percentage. Each value is for a different\nsensor of the grid. These can be plugged into the \"LB Spatial Heatmap\"\ncomponent along with meshes of the sensor grids to visualize results.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "UDI", 
        "description": "Useful daylight illuminance results in percent. UDI is the percentage of\noccupied hours that illuminace falls between minimum and maximum\nthresholds. Each value is for a different sensor of the grid. These\ncan be plugged into the \"LB Spatial Heatmap\" component along with\nmeshes of the sensor grids to visualize results.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "UDI_low", 
        "description": "Results for the percent of time that is below the lower threshold\nof useful daylight illuminance in percent. Each value is for a different\nsensor of the grid. These can be plugged into the \"LB Spatial Heatmap\"\ncomponent along with meshes of the sensor grids to visualize results.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "UDI_up", 
        "description": "Results for the percent of time that is above the upper threshold\nof useful daylight illuminance in percent. Each value is for a different\nsensor of the grid. These can be plugged into the \"LB Spatial Heatmap\"\ncomponent along with meshes of the sensor grids to visualize results.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A Honeybee Model for which Annual Daylight will be simulated.\nNote that this model must have grids assigned to it.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_wea", 
      "description": "A Wea object produced from the Wea components that are under the Light\nSources tab. This can also be the path to a .wea or a .epw file.\nNote that the Wea must have a timestep of 1 to be used with this\nrecipe.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "north_", 
      "description": "A number between -360 and 360 for the counterclockwise difference\nbetween the North and the positive Y-axis in degrees. This can\nalso be Vector for the direction to North. (Default: 0).", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_thresholds_", 
      "description": "A string to change the threshold for daylight autonomy and useful\ndaylight illuminance. Valid keys are -t for daylight autonomy threshold,\n-lt for the lower threshold for useful daylight illuminance and\n-ut for the upper threshold. The order of the keys is not important\nand you can include one or all of them. For instance if you only want\nto change the upper threshold to 2000 lux you should use -ut 2000\nas the input. (Default: -t 300 -lt 100 -ut 3000).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_schedule_", 
      "description": "An annual occupancy schedule, either as a Ladybug Hourly Continuous\nData Collection or a HB-Energy schedule object. This can also be the\npath to a CSV file with 8760 rows or the identifier of a schedule in\nthe honeybee-energy schedule library. Any value in this schedule\nthat is 0.1 or above will be considered occupied. If not provided,\na default schedule that runs from 8 AM to 6 PM on all days will be used.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "grid_filter_", 
      "description": "Text for a grid identifer or a pattern to filter the sensor grids of\nthe model that are simulated. For instance, first_floor_* will simulate\nonly the sensor grids that have an identifier that starts with\nfirst_floor_. By default, all grids in the model will be simulated.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "radiance_par_", 
      "description": "Text for the radiance parameters to be used for ray\ntracing. (Default: -ab 2 -ad 5000 -lw 2e-05).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "enhanced_", 
      "description": "Boolean to note whether an enhanced version of the 2-phase ray tracing\nsimulation should be used, which will more accurately account for\ndirect sun at each time step. If False, only a 2-phase daylight\ncoefficient calculation with sky patches will be used, which is\nmuch faster but spreads the direct sun out across a few sky\npatches, making it unsuitable for ASE. (Default: True).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "run_settings_", 
      "description": "Settings from the \"HB Recipe Settings\" component that specify\nhow the recipe should be run. This can also be a text string of\nrecipe settings.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to True to run the recipe and get results. This input can also be\nthe integer \"2\" to run the recipe silently.", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Recipes", 
  "code": "\ntry:\n    from lbt_recipes.recipe import Recipe\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, recipe_result\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # create the recipe and set the input arguments\n    recipe = Recipe('annual-daylight') if enhanced_ is False else \\\n        Recipe('annual-daylight-enhanced')\n    recipe.input_value_by_name('model', _model)\n    recipe.input_value_by_name('wea', _wea)\n    recipe.input_value_by_name('north', north_)\n    recipe.input_value_by_name('thresholds', _thresholds_)\n    recipe.input_value_by_name('schedule', _schedule_)\n    recipe.input_value_by_name('grid-filter', grid_filter_)\n    recipe.input_value_by_name('radiance-parameters', radiance_par_)\n\n    # run the recipe\n    silent = True if _run > 1 else False\n    project_folder = recipe.run(run_settings_, radiance_check=True, silent=silent)\n\n    # load the results\n    try:\n        results = recipe_result(recipe.output_value_by_name('results', project_folder))\n        DA = recipe_result(recipe.output_value_by_name('da', project_folder))\n        cDA = recipe_result(recipe.output_value_by_name('cda', project_folder))\n        UDI = recipe_result(recipe.output_value_by_name('udi', project_folder))\n        UDI_low = recipe_result(recipe.output_value_by_name('udi-lower', project_folder))\n        UDI_up = recipe_result(recipe.output_value_by_name('udi-upper', project_folder))\n    except Exception:\n        raise Exception(recipe.failure_message(project_folder))\n", 
  "category": "HB-Radiance", 
  "name": "HB Annual Daylight", 
  "description": "Run an annual daylight study for a Honeybee model to compute hourly illuminance\nfor each sensor in a model's sensor grids.\n_\nBy default, this recipe uses an enhanced 2-phase method, which accurately models\ndirect sun by tracing rays from each sensor to the solar position at each hour\nof the calculation. This makes the result suitable for computing Annual Sun\nExposure (ASE) and for modeling the effects of dynamic shades and apertures.\n_\nWhen the enhanced_ option is set to False, a standard 2-phase method for simulation,\nwhich is much faster because it simply determines the relationship between each\nsensor and sky patch and then multiplies the value of each sky patch at each\nhour by the relationship coefficient. However, this means that the direct sun\nis spread out across a few sky patches, making it unsuitable for ASE.\n_\nThe resulting illuminance is used to compute the following metrics:\n_\n* Daylight Autonomy (DA) - The percentage of occupied hours that each sensor\n        recieves more than the illuminance threshold.\n* Continuous Daylight Autonomy (cDA) - Similar to DA except that values below the\n        illuminance threshold can still count partially towards the final percentage.\n* Useful Daylight Illuminance (UDI) - The percentage of occupied hours that\n        illuminace falls between minimum and maximum thresholds\n-"
}