{
  "version": "1.3.0", 
  "nickname": "DaylightSchedule", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "schedules", 
        "description": "Lighting control Recipe", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_results", 
      "description": "An list of annual Radiance result files from the \"HB Annual Daylight\"\ncomponent (containing the .ill files and the sun-up-hours.txt).\nThis can also be just the path to the folder containing these\nresult files.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_base_schedule_", 
      "description": "A lighting schedule representing the usage of lights without\nany daylight controls. The values of this schedule will be multiplied\nby the hourly dimming fraction to yield the output lighting schedules.\nThe format of this schedule can be a Ladybug Data Collection, a HB-Energy\nschedule object, or the identifier of a schedule in the HB-Energy\nschedule library. If None, a schedule from 9AM to 5PM on weekdays\nwill be used.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_ill_setpoint_", 
      "description": "A number for the illuminance setpoint in lux beyond which\nelectric lights are dimmed if there is sufficient daylight.\nSome common setpoints are listed below. (Default: 300 lux).\n-\n50 lux - Corridors and hallways.\n150 lux - Computer work spaces (screens provide illumination).\n300 lux - Paper work spaces (reading from surfaces that need illumination).\n500 lux - Retail spaces or museums illuminating merchandise/artifacts.\n1000 lux - Operating rooms and workshops where light is needed for safety.", 
      "type": "double", 
      "default": 250
    }, 
    {
      "access": "item", 
      "name": "_min_power_in_", 
      "description": "A number between 0 and 1 for the the lowest power the lighting\nsystem can dim down to, expressed as a fraction of maximum\ninput power. (Default: 0.3).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_min_light_out_", 
      "description": "A number between 0 and 1 the lowest lighting output the lighting\nsystem can dim down to, expressed as a fraction of maximum light\noutput. Note that setting this to 1 means lights aren't dimmed at\nall until the illuminance setpoint is reached. This can be used to\napproximate manual light-switching behaviour when used in conjunction\nwith the off_at_min_ output below. (Default: 0.2).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "off_at_min_", 
      "description": "Boolean to note whether lights should switch off completely when\nthey get to the minimum power input. (Default: False).", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Results", 
  "code": "\nimport os\n\ntry:\n    from ladybug.datacollection import BaseCollection\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_radiance.postprocess.annualdaylight import \\\n        generate_default_schedule, _process_input_folder\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.lib.schedules import schedule_by_identifier\n    from honeybee_energy.lib.scheduletypelimits import schedule_type_limit_by_identifier\n    from honeybee_energy.schedule.fixedinterval import ScheduleFixedInterval\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef diminng_from_ill(ill_val, ill_setpt, min_pow, min_light, off_at_min):\n    \"\"\"Compute the dimming fraction from an illuminance value.\"\"\"\n    if ill_val > ill_setpt:  # dimmed all of the way\n        return 0 if off_at_min else min_pow\n    elif ill_val <= min_light:  # not dimmed at all\n        return 1\n    else:  # partially dimmed\n        fract_dim = (ill_setpt - ill_val) / (ill_setpt - min_light)\n        return fract_dim + ((1 - fract_dim) * min_pow)\n\n\ndef file_to_dimming_fraction(ill_file, su_pattern, setpt, m_pow, m_lgt, off_m):\n    \"\"\"Compute hourly dimming fractions for a given result file.\"\"\"\n    # get a base schedule of dimming fractions for the sun-up hours\n    su_values = [0] * len(su_pattern)\n    sensor_count = 0\n    with open(ill_file) as results:\n        for pt_res in results:\n            sensor_count += 1\n            for i, val in enumerate(pt_res.split()):\n                su_values[i] += diminng_from_ill(float(val), setpt, m_pow, m_lgt, off_m)\n    su_values = [val / sensor_count for val in su_values]\n\n    # account for the hours where the sun is not up\n    dim_fract = [1] * 8760\n    for val, hr in zip(su_values, su_pattern):\n        dim_fract[hr] = float(val)\n    return dim_fract\n\n\nif all_required_inputs(ghenv.Component):\n    # set default values for all controls\n    _ill_setpoint_ = 300 if _ill_setpoint_ is None else _ill_setpoint_\n    _min_power_in_ = 0.3 if _min_power_in_ is None else _min_power_in_\n    _min_light_out_ = 0.2 if _min_light_out_ is None else _min_light_out_\n    off_at_min_ = False if off_at_min_ is None else off_at_min_\n\n    # process the base schedule input into a list of values\n    if _base_schedule_ is None:\n        schedule = generate_default_schedule()\n    elif isinstance(_base_schedule_, BaseCollection):\n        schedule = _base_schedule_.values\n    elif isinstance(_base_schedule_, str):\n        schedule = schedule_by_identifier(_base_schedule_).values()\n    else:  # assume that it is a honeybee schedule object\n        try:\n            schedule = _base_schedule_.values()\n        except TypeError:  # it's probably a ScheduleFixedInterval\n            schedule = _base_schedule_.values\n\n    # get the relevant .ill files\n    res_folder = os.path.dirname(_results[0]) if os.path.isfile(_results[0]) \\\n        else _results[0]\n    grids, sun_up_hours = _process_input_folder(res_folder, '*')\n    sun_up_hours = [int(h) for h in sun_up_hours]\n\n    # get the dimming fractions for each sensor grid from the .ill files\n    dim_fracts = []\n    for grid_info in grids:\n        ill_file = os.path.join(res_folder, '%s.ill' % grid_info['full_id'])\n        fract_list = file_to_dimming_fraction(\n            ill_file, sun_up_hours, _ill_setpoint_, _min_power_in_,\n            _min_light_out_, off_at_min_\n        )\n        dim_fracts.append(fract_list)\n\n    # create the schedule by combining the base schedule with the dimming fraction\n    type_limit = schedule_type_limit_by_identifier('Fractional')\n    schedules = []\n    for grid_info, dim_fract in zip(grids, dim_fracts):\n        sch_vals = [b_val * d_val for b_val, d_val in zip(schedule, dim_fract)]\n        sch_id = '{} Daylight Control'.format(grid_info['full_id'])\n        schedules.append(ScheduleFixedInterval(sch_id, sch_vals, type_limit))\n", 
  "category": "HB-Radiance", 
  "name": "HB Daylight Control Schedule", 
  "description": "Generate electric lighting schedules from annual daylight results, which can be\nused to account for daylight controls in energy simulations.\n_\nSuch controls will dim the lights in the energy simulation according to whether\nthe illuminance values at the sensor locations are at a target illuminance setpoint.\n_\nIn addition to benefiting from the accuracy of Radiance, using this component has\nseveral advantages over the \"HB Apply Daylight Control\" component under HB-Energy.\nNotably, it can account for setups with multiple illuminance sensors.\n_\nThis component expects the annual daylight simulation to be run with one sensor\ngrid per room in the model. If the sensor grids within the annual daylight\nsimulation are distrbuted over the entire floor of each room, the resulting\nschedules will be idealized, where light dimming has been optimized to supply\nthe minimum illuminance setpoint everywhere in the room. Grids with one, two,\nor more sensors can be used to model setups where fractions of each room are\ncontrolled by different sensors.\n-"
}