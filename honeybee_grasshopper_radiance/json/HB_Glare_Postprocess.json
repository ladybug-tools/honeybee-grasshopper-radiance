{
  "version": "1.3.1", 
  "nickname": "Glare", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "DGP", 
        "description": "Daylight Glare Probability (DGP) as a number between 0 and 1. The DGP\ndescribes the fraction of persons disturbed by glare, where 0 is no\none disturbed and 1 is everyone. Values lower than 0.2 are out of the\nrange of the user assessment tests, where the program is based on and\nshould be interpreted carefully.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "category", 
        "description": "Text for the category of glare discomfort. It will be one of the\nfollowing.\n* Imperceptible Glare [0.35 > DGP]\n* Perceptible Glare [0.4 > DGP >= 0.35]\n* Disturbing Glare [0.45 > DGP >= 0.4]\n* Intolerable Glare [DGP >= 0.45]", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "glare_indices", 
        "description": "A list of various glare indices ordered as follows.\n* Daylight Glare Index (DGI)\n* Unified Glare Rating (UGR)\n* Visual Comfort Probability (VCP)\n* CIE Glare Index (CGI)\n* Veiling Luminance (Lveil)", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "check_hdr", 
        "description": "Path to a HDR image produced from the glare study. The image will\nuse randomly-assigned colors to indicate different sources of glare\nin the image. It will also show a circular region for the task area\nunless hide_task_ has been set to True.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_hdr", 
      "description": "Path to a hemisphical fisheye High Dynamic Range (HDR) image file. This can be\nobtained from the \"HB Point-In-Time View-Based\" recipe component. Due\nto runtime reasons of the evalglare code, the input HDR image should\nbe smaller than 1500 x 1500 pixels. The recommended size is 1000 x 1000\npixels, the minimum recommended size is 800 x 800 pixels.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "task_pos_", 
      "description": "An optional task position as a 2D point or string formatted as \"X, Y\".\nThe X and Y coordinates of this point must be numbers between 0 and 1\nand correspond to fraction of the image width and height where the\ntask position lies. If no task position is provided, the glare will\nbe valuated for the entire scene of the image.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "task_angle_", 
      "description": "An number between 0 and 180 for the task position opening angle\nin degrees. This angle indicates how widely the peripheral vision\nis engaged for the task. (Default: 30).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "hide_task_", 
      "description": "Boolean to note whether the task area should be hidden in the\noutput check_hdr.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Results", 
  "code": "\nimport os\nimport subprocess\nimport math\n\ntry:  # import honeybee_radiance dependencies\n    from honeybee_radiance.config import folders as rad_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:  # import ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# check the Radiance date of the installed radiance\ntry:  # import lbt_recipes dependencies\n    from lbt_recipes.version import check_radiance_date\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\ncheck_radiance_date()\n\n\ndef check_hdr_luminance_and_fisheye(hdr_path):\n    \"\"\"Check that a given HDR file is a fisheye image for visible luminance.\n\n    A ValueError is raised if the image is not for luminance or if the image is\n    not clearly a hemispheical fisheye.\n\n    Args:\n        hdr_path: The path to an HDR image file.\n    \"\"\"\n    msg = 'Connected _hdr image must be for luminance. Got \"{}\".'\n    projection = '-vth'\n    with open(hdr_path, 'r') as hdr_file:\n        for lineCount, line in enumerate(hdr_file):\n            if lineCount < 200:\n                low_line = line.strip().lower()\n                if low_line.startswith('rpict'):\n                    if line.find('_irradiance.vf') > -1:\n                        raise ValueError(msg.format('irradiance'))\n                    if line.find('_radiance.vf') > -1:\n                        raise ValueError(msg.format('radiance'))\n                    if line.find('-i') > -1 and not line.find('-i-') > -1:\n                        raise ValueError(msg.format('illuminance'))\n                elif low_line.startswith('view='):\n                    if line.find('-vth') > -1:\n                        projection = '-vth'\n                    elif line.find('-vta') > -1:\n                        projection = '-vta'\n                    else:\n                        raise ValueError(\n                            'Connected _hdr image is not a fisheye projection.\\n'\n                            'Make sure the view type of the image is 1(h) or 4(a).')\n                elif 'pcond -h' in low_line:\n                    raise ValueError(\n                        'Connected _hdr image has had the exposure adjusted on it.\\n'\n                        'Make sure adj_expos_ has been set to False in previous steps.')\n            else:  # no need to check the rest of the document\n                break\n    return projection\n\ndef check_hdr_dimensions(hdr_path):\n    \"\"\"Check that a given HDR file has dimensions suitable for evalglare.\n\n    A warning is raised if the image is not 1000x1000 pixels and a ValueError is\n    raised if the image is completely outside the accptable ragne from 800x800\n    to 1500x1500 pixels.\n\n    Args:\n        hdr_path: The path to an HDR image file.\n    \"\"\"\n    # get the path the the getinfo command\n    getinfo_exe = os.path.join(rad_folders.radbin_path, 'getinfo.exe') if \\\n        os.name == 'nt' else os.path.join(rad_folders.radbin_path, 'getinfo')\n\n    # run the getinfo command in a manner that lets us obtain the result\n    cmds = [getinfo_exe, '-d', hdr_path]\n    use_shell = True if os.name == 'nt' else False\n    process = subprocess.Popen(cmds, stdout=subprocess.PIPE, shell=use_shell)\n    stdout = process.communicate()\n    img_dim = stdout[0]\n\n    # check the X and Y dimensions of the image\n    x = int(img_dim.split(' ')[-1].strip())\n    y = int(img_dim.split(' ')[-3].strip())\n    msg = 'Recommended _hdr image dimensions for glare analysis should be \\n' \\\n        '{} {} x {} pixels. Got {} x {}.'\n    if x < 800 or y < 800:\n        give_warning(ghenv.Component, msg.format('at least', 800, 800, x, y))\n    elif x > 1500 or y > 1500:\n        give_warning(ghenv.Component, msg.format('no greater than', 1500, 1500, x, y))\n    return x, y\n\n\ndef dgp_comfort_category(dgp):\n    \"\"\"Get text for the glare comfort category given a DGP value.\"\"\"\n    if dgp < 0.35:\n        return 'Imperceptible Glare'\n    elif dgp < 0.40:\n        return 'Perceptible Glare'\n    elif dgp < 0.45:\n        return 'Disturbing Glare'\n    else:\n        return 'Intolerable Glare'\n\n\nif all_required_inputs(ghenv.Component):\n    # check the input image to ensure it meets the criteria\n    projection = check_hdr_luminance_and_fisheye(_hdr)\n    width, height = check_hdr_dimensions(_hdr)\n\n    # get the path the the evalglare command and setup the check image argument\n    evalglare_exe = os.path.join(rad_folders.radbin_path, 'evalglare.exe') if \\\n        os.name == 'nt' else os.path.join(rad_folders.radbin_path, 'evalglare')\n    img_dir = os.path.dirname(_hdr)\n    input_image = os.path.basename(_hdr)\n    new_image = input_image.lower().replace('.hdr', '_check.HDR')\n    check_hdr = os.path.join(img_dir, new_image)\n    cmds = [evalglare_exe, '-c', check_hdr]\n\n    # since pcomp is used to merge images, the input usually doesn't have view information\n    # add default view information for hemispheical fish-eye camera\n    cmds.extend([projection, '-vv', '180', '-vh', '180'])\n\n    # process the task position and add the input HDR\n    if task_pos_:\n        uv_pt = [float(val) for val in task_pos_.split(',')]\n        assert 0 <= uv_pt[0] <= 1 and 0 <= uv_pt[1] <= 1, 'Task position X and Y ' \\\n            'coordinates must be between 0 and 1.'\n        angle = math.radians(task_angle_) if task_angle_ is not None else math.radians(30)\n        task_opt = '-t' if hide_task_ else '-T'\n        cmds.extend(\n            [task_opt, str(int(uv_pt[0] * width)), str(int(uv_pt[1] * height)), str(angle)])\n    cmds.append(_hdr)\n\n    # run the evalglare command in a manner that lets us obtain the stdout result\n    use_shell = True if os.name == 'nt' else False\n    process = subprocess.Popen(cmds, stdout=subprocess.PIPE, shell=use_shell)\n    stdout = process.communicate()\n\n    # process the stdout result into the component outputs\n    glare_result = stdout[0].split(':')[-1].strip()\n    glare_indices = [float(val) for val in glare_result.split(' ')]\n    DGP = glare_indices.pop(0)\n    category = dgp_comfort_category(DGP)\n", 
  "category": "HB-Radiance", 
  "name": "HB Glare Postprocess", 
  "description": "Perform glare post-processing on a hemisphical fisheye HDR image file.\n_\nGlare post-processing includes calcuating Daylight Glare Probability (DGP) as\nwell as other glare indexes (DGI, UGR, VCP, CGI, UDP).\n_\nThis component is using the `evalglare` function for glare calculations., which\nis developed by J. Wienold at Fraunhofer ISE. More information on evalglare\ncan be found here:\nhttps://www.radiance-online.org/learning/documentation/manual-pages/pdfs/evalglare.pdf/view\n_\nFor more information about the metrics used to evaluate glare, see here:\nhttp://web.mit.edu/tito_/www/Projects/Glare/GlareRecommendationsForPractice.html\n-"
}