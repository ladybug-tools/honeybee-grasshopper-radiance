{
  "version": "1.8.1", 
  "nickname": "AutoGroup", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "model", 
        "description": "The input Honeybee Model object where all Apertures with Outdoors\nboundary condition have been assigned a dynamic group identifier.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A Honeybee Model for which Apertures will be grouped automatically.\nNote that this model must have Apertures with Outdoors boundary\ncondition assigned to it.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_room_based_", 
      "description": "A boolean to note whether the Apertures should be grouped on a\nroom basis. If grouped on a room basis Apertures from different\nroom cannot be in the same group. (Default: True).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_view_factor_", 
      "description": "A boolean to note whether the Apertures should be grouped by\ncalculating view factors for the Apertures to a discretized sky or\nsimply by the normal orientation of the Apertures. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_size_", 
      "description": "Aperture grid size for view factor calculation. A lower number\nwill give a finer grid and more accurate results but the calculation\ntime will increase. This option is only used if _view_factor_ is set\nto True. (Default: 0.2).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "vert_tolerance_", 
      "description": "A float value for vertical tolerance between two Apertures.\nIf the vertical distance between two Apertures is larger than this\ntolerance the Apertures cannot be grouped. If no value is given the\nvertical grouping will be skipped. (Default: None).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "states_", 
      "description": "An optional list of Honeybee State objects to be applied to all the generated groups.\nThese states should be ordered based on how they will be switched on.\nThe first state is the default state and, typically, higher states\nare more shaded. If the objects in the group have no states, the\nmodifiers already assigned the apertures will be used for all states.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to True to run the automatic Aperture grouping.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Basic Properties", 
  "code": "\ntry:\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import honeybee_radiance_command dependencies\n    from honeybee_radiance_command.oconv import Oconv\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance_command:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_radiance.dynamic.multiphase import automatic_aperture_grouping\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    assert isinstance(_model, Model), \\\n        'Input _model must be a Model. Got {}'.format(type(_model))\n    # duplicate model\n    model = _model.duplicate()\n\n    # set defaults\n    room_based = True if _room_based_ is None else _room_based_\n    view_factor = False if _view_factor_ is None else _view_factor_\n    size = 0.2 if _size_ is None else _size_\n    vertical_tolerance = None if vert_tolerance_ is None else vert_tolerance_\n\n    # automatically assign groups\n    automatic_aperture_grouping(\n        model, size=size, room_based=room_based, view_factor_or_orientation=view_factor,\n        vertical_tolerance=vertical_tolerance, states=states_)\n", 
  "category": "HB-Radiance", 
  "name": "HB Automatic Aperture Group", 
  "description": "Calculate Aperture groups for exterior Apertures.\n_\nThe Apertures are grouped by orientation unless _view_factor_ is set to True.\n_\nIf grouping based on view factor the component calculates view factor from\nApertures to sky patches (rfluxmtx). Each Aperture is represented by a sensor\ngrid, and the view factor for the whole Aperture is the average of the grid. The\nRMSE of the view factor to each sky patch is calculated between all Apertures.\nAgglomerative hierarchical clustering (with complete-linkage method) is used to\ngroup the Apertures by using a distance matrix of the RMSE values.\nThe view factor approach is Radiance-based (and slower) and will likely group\nApertures more accurately considering the context geometry of the Honeybee\nModel.\n-"
}