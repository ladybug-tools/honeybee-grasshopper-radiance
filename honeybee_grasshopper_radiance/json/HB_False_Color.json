{
  "version": "1.8.1", 
  "nickname": "FalseColor", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "hdr", 
        "description": "Path to the resulting falsecolor HDR file. This can be plugged into the\nLadybug \"Image Viewer\" component to preview the image. It can also\nbe plugged into the \"HB HDR to GIF\" component to get a GIF image\nthat is more portable and easily previewed by different software.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_hdr", 
      "description": "Path to a High Dynamic Range (HDR) image file.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "max_", 
      "description": "A number to set the upper boundary of the legend. The default is\ndictated based on the legend_unit_.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "seg_count_", 
      "description": "An interger representing the number of steps between the\nhigh and low boundary of the legend. The default is set to 10\nand any custom values input in here should always be greater\nthan or equal to 2.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_height_", 
      "description": "An integer for the height of the legend in pixels. Set to 0\nto completely remove the legend from the output. (Default: 200).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_width_", 
      "description": "An integer for the width of the legend in pixels. Set to 0\nto completely remove the legend from the output. (Default: 100).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_unit_", 
      "description": "Text for the unit of the legend. If unspecified, an attempt will\nbe made to sense the metric from the input image file. Typical examples\ninclude lux, W/m2, cd/m2, w/sr-m2.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "conversion_", 
      "description": "Number for the conversion factor (aka. multiplier) for the results.\nThe default is either 1 or 179 depending on whether the image is for\nradiance or irradiance to luminance or illuminance, respectively.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "contour_lines_", 
      "description": "Set to True ro render the image with colored contour lines.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "logarithmic_", 
      "description": "Number of decades to use with a logarithmic legend scale.\nDecades are the number of intervals of 10 below the maximum scale. If\nunspecified, a linear scale is used.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "extrema_", 
      "description": "Set to True to cause extrema points to be printed on the brightest\nand darkest pixels of the input picture.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "mask_", 
      "description": "A boolen to note whether pixels with a value of zero should be masked in\nblack. (Default: False).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "color_palette_", 
      "description": "Optional interger or text to change the color palette.\nChoose from the following.\n* 0 = def - default colors\n* 1 = pm3d -  a variation of the default colors\n* 2 = spec - the old spectral mapping\n* 3 = hot - a thermal scale", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Results", 
  "code": "\nimport os\nimport subprocess\nimport re\n\ntry:  # import honeybee_radiance_command dependencies\n    from honeybee_radiance_command.falsecolor import Falsecolor\n    from honeybee_radiance_command.pcomb import Pcomb\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance_command:\\n\\t{}'.format(e))\n\ntry:  # import honeybee_radiance dependencies\n    from honeybee_radiance.config import folders as rad_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:  # import ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# check the Radiance date of the installed radiance\ntry:  # import lbt_recipes dependencies\n    from lbt_recipes.version import check_radiance_date\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\ncheck_radiance_date()\n\n\ndef sense_metric_from_hdr(hdr_path):\n    \"\"\"Sense the metric/units of a given HDR file from its properties.\n\n    Args:\n        hdr_path: The path to an HDR image file\n\n    Returns:\n        Text for the units of the file (either 'lux', 'W/m2', 'cd/m2', 'W/sr-m2')\n    \"\"\"\n    with open(hdr_path, 'r') as hdr_file:\n        for lineCount, line in enumerate(hdr_file):\n            if lineCount < 10:\n                low_line = line.strip().lower()\n                if low_line.startswith('oconv') and low_line.endswith('.sky'):\n                    return 'W/sr-m2'  # this is an image of a sky\n                if low_line.startswith('rpict'):\n                    if line.find('_irradiance.vf') > -1:\n                        return 'W/m2'\n                    if line.find('_radiance.vf') > -1:\n                        return 'W/sr-m2'\n                    if line.find('-i') > -1 and not line.find('-i-') > -1:\n                        return 'lux'\n            else:  # we have passed the header of the file\n                return 'cd/m2'  # luminance\n\n\ndef is_fisheye(hdr_path):\n    \"\"\"Sense whether a given HDR file is a fisheye.\n\n    Args:\n        hdr_path: The path to an HDR image file\n\n    Returns:\n        Text for the units of the file (either 'lux', 'W/m2', 'cd/m2', 'W/sr-m2')\n    \"\"\"\n    with open(hdr_path, 'r') as hdr_file:\n        for lineCount, line in enumerate(hdr_file):\n            if lineCount < 10:\n                if '-vth' in line:\n                    return True\n            else:\n                return False\n\ndef get_dimensions(img_dim):\n    \"\"\"Get integers for the dimensions of an image from the pcomb stdout.\n\n    Args:\n        img_dim: Text string that is returned from the pcomb function\n\n    Returns:\n        Two integers for the dimensions of the HDR image\n    \"\"\"\n    dimensions = []\n    for d in ['+X', '-Y']:\n        regex = r'\\%s\\s+(\\d+)' % d\n        matches = re.finditer(regex, img_dim, re.MULTILINE)\n        try:\n            dim = next(matches).groups()[0]\n            dimensions.append(int(dim))\n        except Exception:\n            pass\n    if len(dimensions) == 1:  # it is likely a sky-generated image\n        dimensions.append(int(dim))\n\n    return dimensions\n\n\nif all_required_inputs(ghenv.Component):\n    # set up the paths for the various files used in translation\n    img_dir = os.path.dirname(_hdr)\n    input_image = os.path.basename(_hdr)\n    new_image = input_image.lower().replace('.hdr', '_falsecolor.HDR')\n    hdr = os.path.join(img_dir, new_image)\n\n    # set default properties\n    seg_count_ = seg_count_ if seg_count_ is not None else 10\n    if legend_unit_ is None:\n        legend_unit_ = sense_metric_from_hdr(_hdr)\n    if conversion_ is None:\n        if legend_unit_ in ('W/sr-m2', 'W/m2'):\n            conversion_ = 1\n        else:\n            conversion_ = 179\n    if max_ is None:  # get the max value by running pextrem\n        pextrem_exe = os.path.join(rad_folders.radbin_path, 'pextrem.exe') if \\\n            os.name == 'nt' else os.path.join(rad_folders.radbin_path, 'pextrem')\n        use_shell = True if os.name == 'nt' else False\n        cmds = [pextrem_exe, '-o', _hdr]\n        process = subprocess.Popen(cmds, stdout=subprocess.PIPE, shell=use_shell)\n        stdout = process.communicate()\n        max_rgb = stdout[0].split('\\n')[1]\n        max_ = (sum([float(x) for x in max_rgb.split(' ')[2:]]) / 3) * conversion_\n        if legend_unit_ == 'W/sr-m2' and max_ > 200:  # sun pixel overpowering image\n            max_ = max_ / 50000\n        max_ = str(round(max_, 1)) if max_ >= 0.1 else str(max_)\n\n    # create the command to run falsecolor\n    mask = True if mask_ and is_fisheye(_hdr) else False\n    out_img = new_image if not mask else input_image.lower().replace('.hdr', '_fc_temp.HDR')\n    falsecolor = Falsecolor(input=input_image, output=out_img)\n    falsecolor.options.s = max_\n    falsecolor.options.n = seg_count_\n    falsecolor.options.l = legend_unit_\n    falsecolor.options.m = conversion_\n    if contour_lines_:\n        falsecolor.options.cl = True\n        falsecolor.options.p = input_image\n    if extrema_:\n        falsecolor.options.e = True\n    if logarithmic_:\n        falsecolor.options.log = logarithmic_\n    if legend_height_ is not None:\n        falsecolor.options.lh = legend_height_\n    if legend_width_ is not None:\n        falsecolor.options.lw = legend_width_\n    if color_palette_:\n        PALETTE_DICT = {\n            '0': 'def',\n            '1': 'pm3d',\n            '2': 'spec',\n            '3': 'hot',\n            'def': 'def',\n            'pm3d': 'pm3d',\n            'spec': 'spec',\n            'hot': 'hot'\n        }\n        falsecolor.options.pal = PALETTE_DICT[color_palette_]\n\n    # run the falsecolor command\n    env = None\n    if rad_folders.env != {}:\n        env = rad_folders.env\n    env = dict(os.environ, **env) if env else None\n    falsecolor.run(env, cwd=img_dir)\n\n    # if we should maske, then run an additional pcomb command\n    if mask:\n        # get the dimensions of the image\n        getinfo_exe = os.path.join(rad_folders.radbin_path, 'getinfo.exe') if \\\n            os.name == 'nt' else os.path.join(rad_folders.radbin_path, 'getinfo')\n        cmds = [getinfo_exe, '-d', _hdr]\n        use_shell = True if os.name == 'nt' else False\n        process = subprocess.Popen(cmds, stdout=subprocess.PIPE, shell=use_shell)\n        stdout = process.communicate()\n        img_dim = stdout[0]\n        x, y = get_dimensions(img_dim)\n\n        # mask the image\n        xw = legend_width_ if legend_width_ is not None else 100\n        lh = int(legend_height_ * 1.17) if legend_height_ is not None else (200 * 1.17)\n        yw = lh - y if lh - y > 0 else 0\n        expression = 's(x):x*x;' \\\n            'm=if((xmax-{0})*(ymax-{1})/4-s(x-{0}-(xmax-{0})/2)-s(y-(ymax-{1})/2),1,if({0}-x,1,0));' \\\n            'ro=m*ri(1);' \\\n            'go=m*gi(1);' \\\n            'bo=m*bi(1)'.format(xw, yw)\n        pcomb = Pcomb(input=out_img, output=new_image)\n        pcomb.options.e = '\"{}\"'.format(expression)\n        pcomb.run(env, cwd=img_dir)\n", 
  "category": "HB-Radiance", 
  "name": "HB False Color", 
  "description": "Convert a High Dynamic Range (HDR) image file into a falsecolor version of itself.\n-"
}