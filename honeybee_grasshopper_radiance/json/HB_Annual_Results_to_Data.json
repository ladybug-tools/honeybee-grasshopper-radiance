{
  "version": "1.2.1", 
  "nickname": "AnnualToData", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "data", 
        "description": "A list of hourly data collections containing illuminance or irradiance results.\nThese can be visulized using the ladybug components or deconstructed\nfor detailed analysis with native Grasshopper math components.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_results", 
      "description": "An list of annual Radiance result files from the \"HB Annual Daylight\"\ncomponent (containing the .ill files and the sun-up-hours.txt).\nThis can also be just the path to the folder containing these\nresult files.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "sel_pts_", 
      "description": "An optional point or list of points, which will be used to filter\nthe sensors for which data collections will be imported. If there\nis an input here, the all_pts_ must be connected.", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "tree", 
      "name": "all_pts_", 
      "description": "The data tree of all sensor points that were used in the simulation.\nThis is required in order to look up the index of the sel_pts_ in\nthe results matrices.", 
      "type": "Point3d", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Results", 
  "code": "\nimport os\n\ntry:\n    from ladybug.datatype.illuminance import Illuminance\n    from ladybug.datatype.energyflux import Irradiance\n    from ladybug.analysisperiod import AnalysisPeriod\n    from ladybug.header import Header\n    from ladybug.datacollection import HourlyContinuousCollection\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_radiance.postprocess.annualdaylight import _process_input_folder\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.togeometry import to_point3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree, \\\n        data_tree_to_list\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef file_to_data(ill_file, point_filter, su_pattern, header, timestep):\n    \"\"\"Get a list of data collections for a given result file.\"\"\"\n    data_colls = []\n    with open(ill_file) as results:\n        if point_filter is None:\n            for pt_res in results:\n                base_values = [0] * 8760 * timestep\n                for val, hr in zip(pt_res.split(), su_pattern):\n                    base_values[hr] = float(val)\n                data_colls.append(HourlyContinuousCollection(header, base_values))\n        else:\n            for i, pt_res in enumerate(results):\n                if i in point_filter:\n                    base_values = [0] * 8760 * timestep\n                    for val, hr in zip(pt_res.split(), su_pattern):\n                        base_values[hr] = float(val)\n                    data_colls.append(HourlyContinuousCollection(header, base_values))\n    return data_colls\n\n\ndef find_point_in_grid(s_pt, all_pts):\n    \"\"\"Find the index of a point in a list of list of grids.\"\"\"\n    for i, grid_pts in enumerate(all_pts):\n        for j, g_pt in enumerate(grid_pts):\n            if g_pt.is_equivalent(s_pt, tolerance):\n                return i, j\n\n\nif all_required_inputs(ghenv.Component):\n    # get the relevant .ill files\n    res_folder = os.path.dirname(_results[0]) if os.path.isfile(_results[0]) \\\n        else _results[0]\n    grids, sun_up_hours = _process_input_folder(res_folder, '*')\n\n    # check the sel_pts and all_pts input\n    pt_filter = [None for i in grids]\n    if len(sel_pts_) != 0:\n        pt_filter = [[] for i in grids]\n        all_pts = [[to_point3d(pt) for pt in dat[-1]] for dat in data_tree_to_list(all_pts_)]\n        assert len(all_pts) != 0, 'all_pts_ must be connected in order to use sel_pts_.'\n        sel_pts = [to_point3d(pt) for pt in sel_pts_]\n        for s_pt in sel_pts:\n            i, j = find_point_in_grid(s_pt, all_pts)\n            pt_filter[i].append(j)\n\n    # extract the timestep if it exists\n    timestep, is_irr = 1, False\n    tstep_file = os.path.join(res_folder, 'timestep.txt')\n    if os.path.isfile(tstep_file):  # it's an annual irradiance simulation\n        with open(tstep_file) as tf:\n            timestep = int(tf.readline())\n        is_irr = True\n\n    # parse the sun-up-hours\n    sun_up_hours = [int(h * timestep) for h in sun_up_hours]\n\n    # create the header that will be used for all of the data collections\n    aper = AnalysisPeriod(timestep=timestep)\n    head =  Header(Irradiance(), 'W/m2', aper) if is_irr else \\\n        Header(Illuminance(), 'lux', aper)\n\n    # create the data collections from the .ill files\n    data = []\n    for grid_info, p_filt in zip(grids, pt_filter):\n        ill_file = os.path.join(res_folder, '%s.ill' % grid_info['full_id'])\n        data_list = file_to_data(ill_file, p_filt, sun_up_hours, head, timestep)\n        data.append(data_list)\n    data = list_to_data_tree(data)\n", 
  "category": "HB-Radiance", 
  "name": "HB Annual Results to Data", 
  "description": "Import the hourly illuminance or irradiance results of an annual daylight or irradiance\nstudy to a list of data collections.\n_\nThe resulting data collections can be visulized using the ladybug components or\ndeconstructed for detailed analysis with native Grasshopper math components.\n-"
}