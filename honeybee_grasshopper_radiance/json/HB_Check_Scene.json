{
  "version": "1.6.1", 
  "nickname": "CheckScene", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "hdr", 
        "description": "A High Dynamic Range (HDR) image of the scene. This can be plugged into\nthe Ladybug \"Image Viewer\" component to preview the image. It\ncan also be plugged into the \"HB False Color\" component to convert\nthe image into a false color version. Lastly, it can be connected to\nthe \"HB HDR to GIF\" component to get a GIF image that is more portable\nand easily previewed by different software. Pixel values are in the\nstandard SI units of the requested input metric.\n* illuminance = lux (aka. lm/m2)\n* irradiance = W/m2\n* luminance = cd/m2 (aka. lm/m2-sr)\n* radiance = W/m2-sr", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "An array of honeybee Rooms, Faces, Apertures, Doors or Shades to be\nvisualized in Radiance. This can also be an entire Model to be\nvisualized.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_view_", 
      "description": "An optional Honeybee-Radiance view to specify the view to render. If\nunspecified, the currently active Rhino viewport will be rendered.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_sky_", 
      "description": "An optional Radiance sky from any of the sky components under the \"Light\nSources\" tab. If unspecified, a uniform sky with 10000 lux will be used.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "adj_expos_", 
      "description": "Boolean to note whether the exposure of the image should be adjusted to\nmimic the human visual response in the output. The goal of this process\nis to output an image that correlates more strongly with a person\u2019s\nsubjective impression of a scene rather than the absolute birghtness\nof the scene. (Default: True).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_metric_", 
      "description": "Either an integer or the full name of a point-in-time metric to be\ncomputed by the recipe. (Default: luminance). Choose from the following:\n* 0 = illuminance\n* 1 = irradiance\n* 2 = luminance\n* 3 = radiance", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_resolution_", 
      "description": "An integer for the maximum dimension of each image in pixels\n(either width or height depending on the input view angle and\ntype). (Default: 800).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "radiance_par_", 
      "description": "Text for the radiance parameters to be used for ray\ntracing. (Default: -ab 2 -aa 0.25 -ad 512 -ar 16).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run Radiance and get an image of the scene.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Recipes", 
  "code": "\nimport os\n\ntry:  # import honeybee_radiance dependencies\n    from ladybug.futil import write_to_file_by_name\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:  # import honeybee dependencies\n    from honeybee.config import folders\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import honeybee_radiance_command dependencies\n    from honeybee_radiance_command.oconv import Oconv\n    from honeybee_radiance_command.rpict import Rpict\n    from honeybee_radiance_command.rtrace import Rtrace\n    from honeybee_radiance_command.rcalc import Rcalc\n    from honeybee_radiance_command.pcond import Pcond\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance_command:\\n\\t{}'.format(e))\n\ntry:  # import honeybee_radiance dependencies\n    from honeybee_radiance.config import folders as rad_folders\n    from honeybee_radiance.view import View\n    from honeybee_radiance.lightsource.sky.strutil import string_to_sky\n    from honeybee_radiance.lightsource.sky import CertainIrradiance, ClimateBased\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\n    from ladybug_{{cad}}.viewport import viewport_by_name, viewport_properties\n    from ladybug_{{cad}}.config import tolerance, angle_tolerance, units_system\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# check the Radiance date of the installed radiance\ntry:  # import lbt_recipes dependencies\n    from lbt_recipes.version import check_radiance_date\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\ncheck_radiance_date()\n\n# dictionary of supported metrics\nmetric_dict = {\n    '0': 'illuminance',\n    '1': 'irradiance',\n    '2': 'luminance',\n    '3': 'radiance',\n    'illuminance': 'illuminance',\n    'irradiance': 'irradiance',\n    'luminance': 'luminance',\n    'radiance': 'radiance'\n}\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # set defaults for resolution, metric and view\n    _resolution_ = 800 if _resolution_ is None else _resolution_\n    try:\n        _metric_ = metric_dict[_metric_.lower()] if _metric_ is not None else 'luminance'\n    except KeyError:\n        raise ValueError('Metric \"{}\" is not supported.'.format(_metric_))\n    if _view_ is None:\n        viewp = viewport_by_name(None)\n        v_props = viewport_properties(viewp, 0)\n        VIEW_TYPES = ('v', 'h', 'l', 'c', 'a')\n        _view_ = View(\n            'current_viewport', v_props['position'], v_props['direction'],\n            v_props['up_vector'], VIEW_TYPES[v_props['view_type']],\n            v_props['h_angle'], v_props['v_angle'])\n    else:\n        assert isinstance(_view_, View), 'Expected Radiance View. Got {}.'.format(type(_view_))\n\n    # process the sky input\n    if _sky_ is None:\n        _sky_ = CertainIrradiance.from_illuminance(10000)\n    elif isinstance(_sky_, str):  # convert the sky string into a sky object\n        _sky_ = string_to_sky(_sky_)\n    to_rad_int = 1 if _metric_ in ('irradiance', 'radiance') else 0\n    sky_content = _sky_.to_radiance(to_rad_int) if isinstance(_sky_, ClimateBased) \\\n        else _sky_.to_radiance()\n\n    # process the _hb_objs into a Model and then a Radiance string\n    models = [obj for obj in _hb_objs if isinstance(obj, Model)]\n    other_objs = [obj for obj in _hb_objs if not isinstance(obj, Model)]\n    model = Model.from_objects('scene', other_objs, units_system(), tolerance, angle_tolerance)\n    for m in models:\n        model.add_model(m)\n    model_content, modifier_content = model.to.rad(model, minimal=True)\n\n    # set up the paths for the various files used in translation\n    scene_dir = os.path.join(folders.default_simulation_folder, 'scene_visualiztion')\n    sky_file, scene_file, mat_file = \\\n        'weather.sky', 'scene.rad', 'scene.mat'\n    view_file = 'view_{}.vf'.format(_metric_)\n    write_to_file_by_name(scene_dir, sky_file, sky_content, mkdir=True)\n    write_to_file_by_name(scene_dir, scene_file, model_content)\n    write_to_file_by_name(scene_dir, mat_file, modifier_content)\n    _view_.to_file(scene_dir, view_file)\n    scene_oct, final_hdr = 'scene_visual.oct', 'scene.HDR'\n    hdr = os.path.join(scene_dir, final_hdr)\n    if os.path.isfile(hdr):\n        os.remove(hdr)\n\n    # build up the commands to render the image of the sky\n    oconv = Oconv(inputs=[sky_file, mat_file, scene_file], output=scene_oct)\n    oconv.options.f = True\n\n    rpict = Rpict(octree=scene_oct, output=final_hdr, view=view_file)\n    rpict.options.ab = 2\n    rpict.options.aa = 0.25\n    rpict.options.ad = 512\n    rpict.options.ar = 16\n    if radiance_par_:\n        rpict.options.update_from_string(radiance_par_.strip())\n    if _metric_ in ('illuminance', 'irradiance'):\n        rpict.options.i = True\n    else:\n        rpict.options.i = False\n    rpict.options.x = _resolution_\n    rpict.options.y = _resolution_\n\n    commands = [oconv, rpict]\n    if adj_expos_ or adj_expos_ is None:\n        adj_image = final_hdr.lower().replace('.hdr', '_h.HDR')\n        pcond = Pcond(input=final_hdr, output=adj_image)\n        pcond.options.h = True\n        commands.append(pcond)\n        hdr = os.path.join(scene_dir, adj_image)\n        if os.path.isfile(hdr):\n            os.remove(hdr)\n\n    # run the commands in series and load the global horizontal irradiance\n    env = None\n    if rad_folders.env != {}:\n        env = rad_folders.env\n    env = dict(os.environ, **env) if env else None\n    for r_cmd in commands:\n        r_cmd.run(env, cwd=scene_dir)\n", 
  "category": "HB-Radiance", 
  "name": "HB Check Scene", 
  "description": "Run a quick view-based Radiance simulation to visualize the properties of Honeybee\nobjects within Radiance.\n_\nNote that this simulation is always run on a single processor and will only show\nstatic Radiance properties (no dynamic Aperture or Shade properties). Accordingly, this\ncomponent is only intended for quick checks of properties. For full customization\nof view-based simulations, the \"HB Point-in-time View-based\" recipe should be used.\n-"
}