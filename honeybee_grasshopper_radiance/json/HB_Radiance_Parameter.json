{
  "version": "1.8.0", 
  "nickname": "RadPar", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "rad_par", 
        "description": "Radiance parameters as a text string. These can be plugged into the\nradiance_par_ input of the various recipes.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_recipe_type", 
      "description": "An integer or text for the type of recipe. Acceptable text inputs are\neither the full text of the recipe type (eg. point-in-time-grid) or\nthe name of the Radiance command for which the parameters are being\nused (eg. rtrace). Choose from the following options.\n* 0 | rtrace     | point-in-time-grid | daylight-factor\n* 1 | rpict      | point-in-time-view\n* 2 | rfluxmtx   | annual", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_detail_level_", 
      "description": "An integer or text for the level of detail/quality for which\nradiance parameters will be output. (Default: 0 for low).\nChoose from the following options.\n* 0 | low\n* 1 | medium\n* 2 | high", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "additional_par_", 
      "description": "Text to override the Radiance parameters as needed. Radiance's\nstandard syntax must be followed (e.g. -ps 1 -lw 0.01).", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Recipes", 
  "code": "\ntry:  # import honeybee_radiance_command dependencies\n    from honeybee_radiance_command.options.rtrace import RtraceOptions\n    from honeybee_radiance_command.options.rpict import RpictOptions\n    from honeybee_radiance_command.options.rfluxmtx import RfluxmtxOptions\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance_command:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, recipe_result\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# dictionaries of the various recommendations for radiance parameters\nRTRACE = {\n    'ab': [2, 3, 6],\n    'ad': [512, 2048, 4096],\n    'as_': [128, 2048, 4096],\n    'ar': [16, 64, 128],\n    'aa': [.25, .2, .1],\n    'dj': [0, .5, 1],\n    'ds': [.5, .25, .05],\n    'dt': [.5, .25, .15],\n    'dc': [.25, .5, .75],\n    'dr': [0, 1, 3],\n    'dp': [64, 256, 512],\n    'st': [.85, .5, .15],\n    'lr': [4, 6, 8],\n    'lw': [.05, .01, .005],\n    'ss': [0, .7, 1]\n}\n\nRPICT = {\n    'ab': [2, 3, 6],\n    'ad': [512, 2048, 4096],\n    'as_': [128, 2048, 4096],\n    'ar': [16, 64, 128],\n    'aa': [.25, .2, .1],\n    'ps': [8, 4, 2],\n    'pt': [.15, .10, .05],\n    'pj': [.6, .9, .9],\n    'dj': [0, .5, 1],\n    'ds': [.5, .25, .05],\n    'dt': [.5, .25, .15],\n    'dc': [.25, .5, .75],\n    'dr': [0, 1, 3],\n    'dp': [64, 256, 512],\n    'st': [.85, .5, .15],\n    'lr': [4, 6, 8],\n    'lw': [.05, .01, .005],\n    'ss': [0, .7, 1]\n}\n\nRFLUXMTX = {\n    'ab': [3, 5, 6],\n    'ad': [5000, 15000, 25000],\n    'as_': [128, 2048, 4096],\n    'ds': [.5, .25, .05],\n    'dt': [.5, .25, .15],\n    'dc': [.25, .5, .75],\n    'dr': [0, 1, 3],\n    'dp': [64, 256, 512],\n    'st': [.85, .5, .15],\n    'lr': [4, 6, 8],\n    'lw': [0.000002, 6.67E-07, 4E-07],\n    'ss': [0, .7, 1],\n    'c': [1, 1, 1]\n}\n\n\n# dictionaries to convert between input formats\nRECIPE_TYPES = {\n    '0': 'rtrace',\n    'point-in-time-grid': 'rtrace',\n    'daylight-factor': 'rtrace',\n    'rtrace': 'rtrace',\n    '1': 'rpict',\n    'point-in-time-image': 'rpict',\n    'rpict': 'rpict',\n    '2': 'rfluxmtx',\n    'annual': 'rfluxmtx',\n    'rfluxmtx': 'rfluxmtx',\n}\n\nDETAIL_LEVELS = {\n    '0': 0,\n    'low': 0,\n    '1': 1,\n    'medium': 1,\n    '2': 2,\n    'high': 2\n}\n\n\nif all_required_inputs(ghenv.Component):\n    # process the recipe type and level of detail\n    _detail_level_ = DETAIL_LEVELS[_detail_level_.lower()] \\\n        if _detail_level_ is not None else 0\n    command_name = RECIPE_TYPES[_recipe_type.lower()]\n    if command_name == 'rtrace':\n        option_dict = RTRACE\n        option_obj = RtraceOptions()\n    elif command_name == 'rpict':\n        option_dict = RPICT\n        option_obj = RpictOptions()\n    elif command_name == 'rfluxmtx':\n        option_dict = RFLUXMTX\n        option_obj = RfluxmtxOptions()\n\n    # assign the defualts to the object and output the string\n    for opt_name, opt_val in option_dict.items():\n        setattr(option_obj, opt_name, opt_val[_detail_level_])\n    if additional_par_:\n        option_obj.update_from_string(additional_par_)\n    rad_par = option_obj.to_radiance()\n", 
  "category": "HB-Radiance", 
  "name": "HB Radiance Parameter", 
  "description": "Get recommended Radiance parameters given a recipe type and a level of detail.\n_\nThe original recommendation for the various Radiance paramters comes from this document.\nhttp://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html\n_\nThis presentation by John Mardaljevic gives a good overview of the meaning of each\nradiance paramter.\nhttp://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf\n-"
}